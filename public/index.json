[{"categories":null,"content":"Matrix-A 珍爱头发,远离数学 学 C++ 的卢瑟 答案及隐藏内容 输入作弊码「⬆ ⬆ ⬇ ⬇ ⬅ ➡ ⬅ ➡ 🅱 🅰」查看答案及其它隐藏内容。 提示\r在手机端，「⬆ ⬇ ⬅ ➡」为滑动屏幕，「🅱 🅰」为点击屏幕。\r彩蛋\r好耶！(๑•̀ㅂ•́)و✧\r","date":"2023-07-22","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-07-02","objectID":"/posts/euler/00003/:0:0","tags":["欧拉计划","第1-99题","质数","因数分解"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"最大素因数 $13195$ 的素因数是 $5,7,13$ 和 $29$。 那么 $600851475143$ 的最大素因数是多少？ ","date":"2023-07-02","objectID":"/posts/euler/00003/:1:0","tags":["欧拉计划","第1-99题","质数","因数分解"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"Largest Prime Factor The prime factors of $13195$ are $5,7,13$ and $29$ . What is the largest prime factor of the number $600851475143$ ? 解题方法 ","date":"2023-07-02","objectID":"/posts/euler/00003/:2:0","tags":["欧拉计划","第1-99题","质数","因数分解"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"试除法 已知正整数 $n=600851475143$ ,则 $n$ 的素因数必然为小于等于 $\\sqrt{n}$ 的素数。 因此，可以使用「埃氏筛法」或者「欧拉筛法」筛选出小于 $\\sqrt{n}$ 的素数，并在筛选时判断是否为 $n$ 的素因数。 参考代码 #include \u003ccstdio\u003e #include \u003ccmath\u003e #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cformat\u003e void prime_factor(std::uint64_t num) { const std::uint64_t sqrt { static_cast\u003cstd::uint64_t\u003e(std::floor(std::sqrt(num))) }; std::vector\u003cstd::uint64_t\u003e result; std::vector\u003cstd::uint64_t\u003e prime(sqrt + 1, 0); std::vector\u003cstd::uint64_t\u003e visit(sqrt + 1, 0); for (std::uint64_t i = 2; i \u003c= sqrt; ++i) { if (!visit[i]) { prime[++prime[0]] = i; while (num % i == 0) { // 进行判断 num /= i; result.push_back(i); if (num == 1) { // 输出结果 std::cout \u003c\u003c std::format(\"Project Euler 2 result: {}\\n\", *result.rbegin()); return; } } } for (std::uint64_t j = 1; j \u003c= prime[0] \u0026\u0026 i * prime[j] \u003c= sqrt; ++j) { visit[i * prime[j]] = 1; if (i % prime[j] == 0) break; } } return; } int main() { constexpr std::uint64_t N{ 600851475143ll }; // sqrt(N) = 775146.0992245268 prime_factor(N); } 正确答案 答案\r6857\r参考链接 维基百科 - 试除法 维基百科 - 埃拉托斯特尼筛法 OI.Wiki - 素数筛法 ","date":"2023-07-02","objectID":"/posts/euler/00003/:3:0","tags":["欧拉计划","第1-99题","质数","因数分解"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-06-30","objectID":"/posts/euler/00002/:0:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"偶斐波那契数 斐波那契数列中的每一项都是前两项的和。由 $1$ 和 $2$ 开始生成的斐波那契数列的前 $10$ 项为: $$ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\ldots $$ 考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。 ","date":"2023-06-30","objectID":"/posts/euler/00002/:1:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"Even Fibonacci numbers Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$ , the first $10$ terms will be: $$ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\ldots $$ By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 解题方法 ","date":"2023-06-30","objectID":"/posts/euler/00002/:2:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"暴力计算 直接生成小于四百万的斐波那契数列，依次判断数字是否满足条件并累加。 ","date":"2023-06-30","objectID":"/posts/euler/00002/:3:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"通项公式 观察斐波那契数列 $F_{n}$ 可知，每间隔两个元素存在一个偶数。其中第一个偶数为 $F_{2}=2$，第二个偶数为 $F_{5}=8$。 现假设第 $n$ 项为偶数（ $n\u003e5$ ）,则可以通过以下运算得到偶数项的计算公式如下： $$ {{\\begin{aligned}F_{n} \u0026=F_{n-1}+F_{n-2} \\\\ \u0026=(F_{n-2}+F_{n-3})+(F_{n-3}+F_{n-4}) \\\\ \u0026=((F_{n-3}+F_{n-4})+F_{n-3})+(F_{n-3}+F_{n-4}) \\\\ \u0026=3F_{n-3}+2F_{n-4} \\\\ \u0026=3F_{n-3}+F_{n-4}+F_{n-5}+F_{n-6} \\\\ \u0026=4F_{n-3}+F_{n-6} \\\\ \\end{aligned}}} $$ 取出所有的偶数项构成新的数列 $G$ ，公式如下 $$ G_{n} = \\begin{cases} 2 \u0026 n=1 \\\\ 8 \u0026 n=2 \\\\ 4*G_{n-1} + G_{n-2} \u0026 n\u003e2 \\end{cases} $$ 参考代码 std::uint64_t even_fibonacci(std::uint64_t max) { std::uint64_t a{ 2 }; std::uint64_t b{ 8 }; std::uint64_t c{ 4 * b + a }; std::uint64_t sum{ 0 }; if (a \u003c max) sum += a; if (b \u003c max) sum += b; while (c \u003c max) { sum += c; a = b; b = c; c = 4 * b + a; } return sum; } 正确答案 答案\r4613732\r参考链接 维基百科 - 斐波那契数 OI.Wiki - 斐波那契数列 ","date":"2023-06-30","objectID":"/posts/euler/00002/:4:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-06-30","objectID":"/posts/euler/00001/:0:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"},{"categories":["欧拉计划"],"content":"3或5的倍数 在小于 $10$ 的自然数中，$3$ 或 $5$ 的倍数有 $3$ 、 $5$ 、 $6$ 和 $9$ ，这些数之和是 $23$ 。 求小于 $1000$ 的自然数中所有 $3$ 或 $5$ 的倍数之和。 ","date":"2023-06-30","objectID":"/posts/euler/00001/:1:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"},{"categories":["欧拉计划"],"content":"Multiples of 3 or 5 If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3$ , $5$, $6$ and $9$. The sum of these multiples is $23$. Find the sum of all the multiples of $3$ or $5$ below $1000$. 解题方法 用集合 $A$ 表示大于 $1$ 小于 $1000$ 的 $3$ 的倍数。 显然集合 $A$ 中的数据是首项是 $3$ ，公差是 $3$ 的等差数列的前 $⌊\\frac {1000}{3}⌋$ 项。 用集合 $B$ 表示大于 $1$ 小于 $1000$ 的 $5$ 的倍数。 显然集合 $B$ 中的数据是首项是 $5$ ，公差是 $5$ 的等差数列的前 $⌊\\frac {1000}{5}⌋$ 项。 用集合 $C$ 表示大于 $1$ 小于 $1000$ 的 $15$ 的倍数。 显然集合 $C$ 中的数据是首项是 $15$ ，公差是 $15$ 的等差数列的前 $⌊\\frac {1000}{15}⌋$ 项，且 $C=A \\cap B$ 根据容斥原理，显然 $$\\sum_{x \\in { A \\cup B}} x = \\sum_{a \\in A} a + \\sum_{b \\in B} b-\\sum_{c \\in C}c$$ 参考代码 print((3+999)*(1000//3)/2 + (5+995)*(1000//5)/2 - (15+990)*(1000//15)/2) 正确答案 答案\r233168\r参考链接 维基百科 - 等差数列 维基百科 - 容斥原理 OI.Wiki - 容斥原理 ","date":"2023-06-30","objectID":"/posts/euler/00001/:2:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"}]