[{"categories":["欧拉计划"],"content":"题目 ","date":"2023-08-24","objectID":"/posts/euler/00007/:0:0","tags":["欧拉计划","第1-99题","素数","埃拉托斯特尼筛法","埃氏筛法"],"title":"第7题: 第 $10001$ 个素数","uri":"/posts/euler/00007/"},{"categories":["欧拉计划"],"content":"第 $10001$ 个素数 通过查看素数表的前 $6$ 个数字 $2,3,5,7,11$ 和 $13$ ，我们可以得知第 $6$ 个素数为 $13$ 。 第$10001$个素数是多少？ ","date":"2023-08-24","objectID":"/posts/euler/00007/:1:0","tags":["欧拉计划","第1-99题","素数","埃拉托斯特尼筛法","埃氏筛法"],"title":"第7题: 第 $10001$ 个素数","uri":"/posts/euler/00007/"},{"categories":["欧拉计划"],"content":"$10001$st Prime By listing the first six prime numbers: $2,3,5,7,11$, and $13$, we can see that the $6$th prime is $13$. What is the $10001$st prime number? 解题方法 ","date":"2023-08-24","objectID":"/posts/euler/00007/:2:0","tags":["欧拉计划","第1-99题","素数","埃拉托斯特尼筛法","埃氏筛法"],"title":"第7题: 第 $10001$ 个素数","uri":"/posts/euler/00007/"},{"categories":["欧拉计划"],"content":"查表 直接通过网络上提供的素数表，查取第 $10001$ 个素数。 如 The Nth Prime Page。 也可以通过询问 AI 得到第 $10001$ 个素数。 ","date":"2023-08-24","objectID":"/posts/euler/00007/:3:0","tags":["欧拉计划","第1-99题","素数","埃拉托斯特尼筛法","埃氏筛法"],"title":"第7题: 第 $10001$ 个素数","uri":"/posts/euler/00007/"},{"categories":["欧拉计划"],"content":"筛法 根据素数计数函数的近似值 $\\pi(x)=\\frac{x}{ln(x)}$，可以粗略估计需要的判断的自然数范围。 $$ \\begin{aligned} \\pi(50000)\u0026=\\frac{50000}{ln(50000)}\\approx 4621.166782321471 \\\\ \\pi(100000)\u0026=\\frac{100000}{ln(100000)}\\approx 8685.889638065037 \\\\ \\pi(150000)\u0026=\\frac{150000}{ln(150000)}\\approx 12585.59191195029 \\end{aligned} $$ 考虑到 $\\pi(x)$ 在大于 $10^5$ 时，存在小于 $10%$ 的误差，因此使用使用 $150000$ 作为筛法的上界。 使用「埃氏筛法」或者「欧拉筛法」筛选出答案。 参考代码 std::int64_t prime() { constexpr std::int64_t num{ 150000 }; const std::int64_t sqrt{ static_cast\u003cstd::int64_t\u003e(std::floor(std::sqrt(num))) }; std::vector\u003cstd::int64_t\u003e result; std::vector\u003cstd::int64_t\u003e prime(num + 1, 0); std::vector\u003cstd::int64_t\u003e visit(num + 1, 0); for (std::int64_t i = 2; i \u003c= num; ++i) { if (!visit[i]) { prime[++prime[0]] = i; if (prime[0] == 10001) return i; } for (std::int64_t j = 1; j \u003c= prime[0] \u0026\u0026 i * prime[j] \u003c= sqrt; ++j) { visit[i * prime[j]] = 1; if (i % prime[j] == 0) break; } } return 0; } 正确答案 答案\r104743\r参考链接 维基百科 - 素数计数函数 维基百科 - 试除法 维基百科 - 埃拉托斯特尼筛法 OI.Wiki - 素数筛法 ","date":"2023-08-24","objectID":"/posts/euler/00007/:4:0","tags":["欧拉计划","第1-99题","素数","埃拉托斯特尼筛法","埃氏筛法"],"title":"第7题: 第 $10001$ 个素数","uri":"/posts/euler/00007/"},{"categories":["欧拉计划"],"content":"题目 和平方与平方和的差 前十个自然数的平方和为 $$ 1^2+2^2+\\dots+10^2=385 $$ 前十个自然数的和平方为 $$ (1+2+\\dots+10)^2=55^2=3025 $$ 因此前十个自然数的平方和与和平方的差为 $3025-385=2640$。 求前一百个自然数的平方和与和平方的差。 Sum Square Difference The sum of the squares of the first ten natural numbers is, $$ 1^2+2^2+\\dots+10^2=385 $$ The square of the sum of the first ten natural numbers is, $$ (1+2+\\dots+10)^2=55^2=3025 $$ Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025-385=2640$. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. 解题方法 ","date":"2023-08-21","objectID":"/posts/euler/00006/:0:0","tags":["欧拉计划","第1-99题","平方和","和平方"],"title":"第6题: 和平方与平方和的差","uri":"/posts/euler/00006/"},{"categories":["欧拉计划"],"content":"弱智版 直接循环暴力求解。不赘述。 ","date":"2023-08-21","objectID":"/posts/euler/00006/:1:0","tags":["欧拉计划","第1-99题","平方和","和平方"],"title":"第6题: 和平方与平方和的差","uri":"/posts/euler/00006/"},{"categories":["欧拉计划"],"content":"公式法 平方和公式为： $$ \\sum_{i=1}^{n}i^2=\\frac{n(n+1)(2n+1)}{6} $$ 和平方的计算为： $$ (\\sum_{i=1}^{n}i)^2=[\\frac{n(n+1)}{2}]^2 $$ 则二者的差为 $$ \\begin{aligned} (\\sum_{i=1}^{n}i)^2-\\sum_{i=1}^{n}i^2\u0026=[\\frac{n(n+1)}{2}]^2-\\frac{n(n+1)(2n+1)}{6} \\\\ \u0026=n(n+1)[\\frac{3n(n+1)-2(2n+1)}{12}] \\\\ \u0026=\\frac{n(n+1)(n-1)(3n+2)}{12} \\end{aligned} $$ 参考代码 auto result = 100*(100+1)*(100-1)*(3*100+2)/12; 正确答案 答案\r25164150\r参考链接 百度百科 - 平方和公式 知乎专栏 - 一个有趣的数列求和——自然数平方和 维基百科 - 和平方 维基百科 - 平方#平方和 ","date":"2023-08-21","objectID":"/posts/euler/00006/:2:0","tags":["欧拉计划","第1-99题","平方和","和平方"],"title":"第6题: 和平方与平方和的差","uri":"/posts/euler/00006/"},{"categories":["欧拉计划"],"content":"题目 最小倍数 $2520$ 是可以被 $1$ 至 $10$ 中的每一个数整除的最小数。 求能被 $1$ 至 $20$ 中的每一个数整除的最小正整数。 Smallest Multiple $2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from $1$ to $20$? 解题方法 显然，答案为 $1$ 至 $20$ 中的每一个数进行素因数分解后，取最大的次方并相乘。 对 $1$ 至 $20$ 分解素因数见下表： - 2 3 5 7 11 13 17 19 1 2 1 3 1 4 2 5 1 6 1 1 7 1 8 3 9 2 10 1 1 11 1 12 2 1 13 1 14 1 1 15 1 1 16 4 17 1 18 1 2 19 1 20 2 1 最高次方 4 2 1 1 1 1 1 1 因此答案为 $ 2^{4} * 3^{2} * 7 * 11 * 13 * 17 * 19$ 参考代码 auto result = 2*2*2*2*3*3*5*7*11*13*17*19; 正确答案 答案\r232792560\r","date":"2023-08-21","objectID":"/posts/euler/00005/:0:0","tags":["欧拉计划","第1-99题","素因数分解"],"title":"第5题: 最小倍数","uri":"/posts/euler/00005/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-08-06","objectID":"/posts/euler/00004/:0:0","tags":["欧拉计划","第1-99题","回文数","回文数乘积"],"title":"第4题: 最大的回文乘积","uri":"/posts/euler/00004/"},{"categories":["欧拉计划"],"content":"最大的回文乘积 回文数就是正反两边读都是相同的数。两个两位数的乘积中最大的回文数是 $9009=91*99$。 找到两个三位数乘积中最大的回文数。 ","date":"2023-08-06","objectID":"/posts/euler/00004/:1:0","tags":["欧拉计划","第1-99题","回文数","回文数乘积"],"title":"第4题: 最大的回文乘积","uri":"/posts/euler/00004/"},{"categories":["欧拉计划"],"content":"Largest Palindrome Product A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009=91*99$. Find the largest palindrome made from the product of two $3$-digit numbers. 解题方法 ","date":"2023-08-06","objectID":"/posts/euler/00004/:2:0","tags":["欧拉计划","第1-99题","回文数","回文数乘积"],"title":"第4题: 最大的回文乘积","uri":"/posts/euler/00004/"},{"categories":["欧拉计划"],"content":"分析 假设回文数为 $‘abccba’$，则有以下计算： $$ \\begin{aligned} ‘abccba’\u0026=100000a+10000b+1000c+100c+10b+a \\\\ \u0026=100001a+10010b+1100c \\\\ \u0026=11(9091a+910b+100c) \\\\ \\end{aligned} $$ 因此所求回文数必然存在一个三位数因数为 $11$ 的倍数。 假设存在一个回文数 $z$ 为两个三位数的乘积，则最大的回文数乘积的三位数必然大于 $z/999$。 两个三位数的乘积的最大值为 $999999=998001$，最小值为 $100100=10000$。因此所求的最大的回文数乘积必然为一个六位数或一个五位数。 ","date":"2023-08-06","objectID":"/posts/euler/00004/:3:0","tags":["欧拉计划","第1-99题","回文数","回文数乘积"],"title":"第4题: 最大的回文乘积","uri":"/posts/euler/00004/"},{"categories":["欧拉计划"],"content":"思路 实现一个六位数和五位数的回文数判断函数。 从 $999$ 开始遍历 $x$ 和 $y$，下界为 $100$ 和 $z/999$。 参考代码 bool is_palindrome_5_6(int z) { if (z \u003e= 100000 \u0026\u0026 z \u003c= 999999) { return z % 10 == z / 100000 \u0026\u0026 z / 10 % 10 == z / 10000 % 10 \u0026\u0026 z / 100 % 10 == z / 1000 % 10; } else if (z \u003e= 10000 \u0026\u0026 z \u003c= 99999) { return z % 10 == z / 10000 \u0026\u0026 z / 10 % 10 == z / 1000 % 10; } else { return false; } } int palindrome_product() { int result = 0; int l = 100; // x 的下界 for (int x = 999; x \u003e= l; --x) { int yi = x % 11 ? 990 : 999; // 若 x 不为 11 的倍数，则 y 必须为 11 的倍数 int yt = x % 11 ? 11 : 1; for (int y = yi; y \u003e= x; y -= yt) { auto t = x * y; if (is_palindrome_5_6(t)) { if (result \u003e t) break; else { result = t; l = t / 999; } } } } return result; } 正确答案 答案\r906609\r","date":"2023-08-06","objectID":"/posts/euler/00004/:4:0","tags":["欧拉计划","第1-99题","回文数","回文数乘积"],"title":"第4题: 最大的回文乘积","uri":"/posts/euler/00004/"},{"categories":null,"content":"Matrix-A 珍爱头发,远离数学 学 C++ 的卢瑟 答案及隐藏内容 输入作弊码「⬆ ⬆ ⬇ ⬇ ⬅ ➡ ⬅ ➡ 🅱 🅰」查看答案及其它隐藏内容。 提示\r在手机端，「⬆ ⬇ ⬅ ➡」为滑动屏幕，「🅱 🅰」为点击屏幕。\r彩蛋\r好耶！(๑•̀ㅂ•́)و✧\r","date":"2023-07-22","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-07-02","objectID":"/posts/euler/00003/:0:0","tags":["欧拉计划","第1-99题","素数","素因数分解","埃拉托斯特尼筛法","埃氏筛法"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"最大素因数 $13195$ 的素因数是 $5,7,13$ 和 $29$。 那么 $600851475143$ 的最大素因数是多少？ ","date":"2023-07-02","objectID":"/posts/euler/00003/:1:0","tags":["欧拉计划","第1-99题","素数","素因数分解","埃拉托斯特尼筛法","埃氏筛法"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"Largest Prime Factor The prime factors of $13195$ are $5,7,13$ and $29$ . What is the largest prime factor of the number $600851475143$ ? 解题方法 ","date":"2023-07-02","objectID":"/posts/euler/00003/:2:0","tags":["欧拉计划","第1-99题","素数","素因数分解","埃拉托斯特尼筛法","埃氏筛法"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"试除法 已知正整数 $n=600851475143$ ,则 $n$ 的素因数必然为小于等于 $\\sqrt{n}$ 的素数。 因此，可以使用「埃氏筛法」或者「欧拉筛法」筛选出小于 $\\sqrt{n}$ 的素数，并在筛选时判断是否为 $n$ 的素因数。 参考代码 #include \u003ccstdio\u003e #include \u003ccmath\u003e #include \u003ciostream\u003e #include \u003cvector\u003e #include \u003cformat\u003e std::uint64_t prime_factor(std::uint64_t num) { const std::uint64_t sqrt { static_cast\u003cstd::uint64_t\u003e(std::floor(std::sqrt(num))) }; std::vector\u003cstd::uint64_t\u003e result; std::vector\u003cstd::uint64_t\u003e prime(sqrt + 1, 0); std::vector\u003cstd::uint64_t\u003e visit(sqrt + 1, 0); for (std::uint64_t i = 2; i \u003c= sqrt; ++i) { if (!visit[i]) { prime[++prime[0]] = i; while (num % i == 0) { // 进行判断 num /= i; result.push_back(i); if (num == 1) { return *result.rbegin(); } } } for (std::uint64_t j = 1; j \u003c= prime[0] \u0026\u0026 i * prime[j] \u003c= sqrt; ++j) { visit[i * prime[j]] = 1; if (i % prime[j] == 0) break; } } return UINT64_MAX; } int main() { constexpr std::uint64_t N{ 600851475143ll }; // sqrt(N) = 775146.0992245268 std::cout \u003c\u003c std::format(\"Project Euler 3 result: {}\\n\", prime_factor(N)); } 正确答案 答案\r6857\r参考链接 维基百科 - 试除法 维基百科 - 埃拉托斯特尼筛法 OI.Wiki - 素数筛法 ","date":"2023-07-02","objectID":"/posts/euler/00003/:3:0","tags":["欧拉计划","第1-99题","素数","素因数分解","埃拉托斯特尼筛法","埃氏筛法"],"title":"第3题: 最大质因数","uri":"/posts/euler/00003/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-06-30","objectID":"/posts/euler/00002/:0:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"偶斐波那契数 斐波那契数列中的每一项都是前两项的和。由 $1$ 和 $2$ 开始生成的斐波那契数列的前 $10$ 项为: $$ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\ldots $$ 考虑该斐波那契数列中不超过四百万的项，求其中为偶数的项之和。 ","date":"2023-06-30","objectID":"/posts/euler/00002/:1:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"Even Fibonacci numbers Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$ , the first $10$ terms will be: $$ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\ldots $$ By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. 解题方法 ","date":"2023-06-30","objectID":"/posts/euler/00002/:2:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"暴力计算 直接生成小于四百万的斐波那契数列，依次判断数字是否满足条件并累加。 ","date":"2023-06-30","objectID":"/posts/euler/00002/:3:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"通项公式 观察斐波那契数列 $F_{n}$ 可知，每间隔两个元素存在一个偶数。其中第一个偶数为 $F_{2}=2$，第二个偶数为 $F_{5}=8$。 现假设第 $n$ 项为偶数（ $n\u003e5$ ）,则可以通过以下运算得到偶数项的计算公式如下： $$ {{\\begin{aligned}F_{n} \u0026=F_{n-1}+F_{n-2} \\\\ \u0026=(F_{n-2}+F_{n-3})+(F_{n-3}+F_{n-4}) \\\\ \u0026=((F_{n-3}+F_{n-4})+F_{n-3})+(F_{n-3}+F_{n-4}) \\\\ \u0026=3F_{n-3}+2F_{n-4} \\\\ \u0026=3F_{n-3}+F_{n-4}+F_{n-5}+F_{n-6} \\\\ \u0026=4F_{n-3}+F_{n-6} \\\\ \\end{aligned}}} $$ 取出所有的偶数项构成新的数列 $G$ ，公式如下 $$ G_{n} = \\begin{cases} 2 \u0026 n=1 \\\\ 8 \u0026 n=2 \\\\ 4*G_{n-1} + G_{n-2} \u0026 n\u003e2 \\end{cases} $$ 参考代码 std::uint64_t even_fibonacci(std::uint64_t max) { std::uint64_t a{ 2 }; std::uint64_t b{ 8 }; std::uint64_t c{ 4 * b + a }; std::uint64_t sum{ 0 }; if (a \u003c max) sum += a; if (b \u003c max) sum += b; while (c \u003c max) { sum += c; a = b; b = c; c = 4 * b + a; } return sum; } 正确答案 答案\r4613732\r参考链接 维基百科 - 斐波那契数 OI.Wiki - 斐波那契数列 ","date":"2023-06-30","objectID":"/posts/euler/00002/:4:0","tags":["欧拉计划","第1-99题","斐波那契数"],"title":"第2题: 偶斐波那契数","uri":"/posts/euler/00002/"},{"categories":["欧拉计划"],"content":"题目 ","date":"2023-06-30","objectID":"/posts/euler/00001/:0:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"},{"categories":["欧拉计划"],"content":"3或5的倍数 在小于 $10$ 的自然数中，$3$ 或 $5$ 的倍数有 $3$ 、 $5$ 、 $6$ 和 $9$ ，这些数之和是 $23$ 。 求小于 $1000$ 的自然数中所有 $3$ 或 $5$ 的倍数之和。 ","date":"2023-06-30","objectID":"/posts/euler/00001/:1:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"},{"categories":["欧拉计划"],"content":"Multiples of 3 or 5 If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3$ , $5$, $6$ and $9$. The sum of these multiples is $23$. Find the sum of all the multiples of $3$ or $5$ below $1000$. 解题方法 用集合 $A$ 表示大于 $1$ 小于 $1000$ 的 $3$ 的倍数。 显然集合 $A$ 中的数据是首项是 $3$ ，公差是 $3$ 的等差数列的前 $⌊\\frac {1000}{3}⌋$ 项。 用集合 $B$ 表示大于 $1$ 小于 $1000$ 的 $5$ 的倍数。 显然集合 $B$ 中的数据是首项是 $5$ ，公差是 $5$ 的等差数列的前 $⌊\\frac {1000}{5}⌋$ 项。 用集合 $C$ 表示大于 $1$ 小于 $1000$ 的 $15$ 的倍数。 显然集合 $C$ 中的数据是首项是 $15$ ，公差是 $15$ 的等差数列的前 $⌊\\frac {1000}{15}⌋$ 项，且 $C=A \\cap B$ 根据容斥原理，显然 $$\\sum_{x \\in { A \\cup B}} x = \\sum_{a \\in A} a + \\sum_{b \\in B} b-\\sum_{c \\in C}c$$ 参考代码 print((3+999)*(1000//3)/2 + (5+995)*(1000//5)/2 - (15+990)*(1000//15)/2) 正确答案 答案\r233168\r参考链接 维基百科 - 等差数列 维基百科 - 容斥原理 OI.Wiki - 容斥原理 ","date":"2023-06-30","objectID":"/posts/euler/00001/:2:0","tags":["欧拉计划","第1-99题","等差数列","容斥原理"],"title":"第1题: 3或5的倍数","uri":"/posts/euler/00001/"}]